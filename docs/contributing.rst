======================
コントリビューター向け
======================

.. note::

    オリジナルの時点で「こうなっていたい」という戒めを含めたガイドラインとなります。


フォルダ構成について
====================

大きく分けて次の構成をベースとしています。

* ``docs``
* ``specs``
* ``src``
* ``tests``


``docs``
--------

ユーザー向けドキュメント。

``reStructuredText`` で記述し、 ``Sphinx`` によるHTMLビルドされます。
このフォルダのファイルのみに影響を与えるライブラリは、
``extras_require`` の ``develop`` セクションに定義します。


``specs``
---------

内部寄り技術仕様系ドキュメント。
基本的には、このドキュメントは未確定情報を多分に含むことを前提とします。

可能な限りこのフォルダ内のファイルは少ない状態を保ち、
外部に公開しても支障のないものは、原則として ``docs`` 側で管理します。

``reStructuredText`` で記述します。


``src``
-------

実プログラムのコード。

``flake8`` の文法チェックをパスし、 ``tests`` フォルダにあるテストに可能な限りテストコードを準備することとします。

基本的には ``Python`` のみのコードとなります。


``tests``
---------

テストコード。

py.test`` を使用することを前提とした ``Python`` のみのコードとなります。


Gitガイドライン
===============

ブランチモデル
--------------

イメージとして、 ``GitLab Flow`` の要素をわずかに持つ ``GitHub Flow`` となります。

* ``master``

  * 開発用ブランチ
  * ここへの直接コミットは最小限になるように心がける
  * 後述の ``release`` ブランチの内容もタイミングを取って取り込み、可能な限り最新の状態を保つこと

* ``release/VERISON``

  * リリース系ブランチ
  * Majorレベルリリースの内容が確定したタイミングからブランチを作成
  * 以後、次の項目のみをコミットする

    * バージョン更新のドキュメント
    * ``bumpversion`` によるバージョン更新コミット

  * リリースに必要な情報がコミットで揃い次第、タグを作成する
  * タグを作成後に、 ``master`` ブランチへマージすること

* ``その他``

  * 機能追加・修正などの要素に合わせて、 ``(種別)/(内容)`` 形式でブランチを作成する
  * コミット先は、必ず ``master`` とする


コミットログ
------------

コミットログは原則として「平易な英語」でおこなう。

